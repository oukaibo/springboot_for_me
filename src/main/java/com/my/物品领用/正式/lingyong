// <script type='text/javascript'>
var c0;
var c1;
var c2;
var c3;
var c4;
var c5;
var c6;
var c7;
var c8;
var c9;
var c10;
var c11;
var c12;
var c13;
var c14;
var c15;
var c16;
var c17;
var c18;
var c19;
var c20;
var c21;
var trCObj0;
$(function() {
    trCObj0 = $("[name='userAimTable']").find("tbody").find("tr").eq(0);
    c0 = trCObj0.find("td[data-label='商品编码'][class!='no_data']").index();
    c1 = trCObj0.find("td[data-label='商品名称']").index();
    c2 = trCObj0.find("td[data-label='资产名称']").index();
    c3 = trCObj0.find("td[data-label='成本价(基本单位)']").index();
    c4 = trCObj0.find("td[data-label='数量(基本单位)']").index();
    c5 = trCObj0.find("td[data-label='用途']").index();
    c6 = trCObj0.find("td[data-label='总价']").index();
    c7 = trCObj0.find("td[data-label='成本中心代码']").index();
    c8 = trCObj0.find("td[data-label='成本中心名称']").index();
    c9 = trCObj0.find("td[data-label='预算控制模式']").index();
    c10 = trCObj0.find("td[data-label='成本中心预算']").index();
    c11 = trCObj0.find("td[data-label='卡券名称']").index();
    c12 = trCObj0.find("td[data-label='卡券面值']").index();
    c13 = trCObj0.find("td[data-label='领用方式']").index();
    c14 = trCObj0.find("td[data-label='期望最晚邮寄时间']").index();
    c15 = trCObj0.find("td[data-label='收获地址']").index();
    c16 = trCObj0.find("td[data-label='收货人']").index();
    c17 = trCObj0.find("td[data-label='寄货人']").index();
    c18 = trCObj0.find("td[data-label='快递单号']").index();
    c19 = trCObj0.find("td[data-label='基本单位']").index();
    c20 = trCObj0.find("td[data-label='收货人电话']").index();
    c21 = trCObj0.find("td[data-label='实际出库数量']").index();
    if (common.isMobile()) {
        c0 = trCObj0.find("td[data-label='商品编码'][class!='no_data']").index() - 2;
        c1 = trCObj0.find("td[data-label='商品名称']").index() - 2;
        c2 = trCObj0.find("td[data-label='资产名称']").index() - 2;
        c3 = trCObj0.find("td[data-label='成本价(基本单位)']").index() - 2;
        c4 = trCObj0.find("td[data-label='数量(基本单位)']").index() - 2;
        c5 = trCObj0.find("td[data-label='用途']").index() - 2;
        c6 = trCObj0.find("td[data-label='总价']").index() - 2;
        c7 = trCObj0.find("td[data-label='成本中心代码']").index() - 2;
        c8 = trCObj0.find("td[data-label='成本中心名称']").index() - 2;
        c9 = trCObj0.find("td[data-label='预算控制模式']").index() - 2;
        c10 = trCObj0.find("td[data-label='成本中心预算']").index() - 2;
        c11 = trCObj0.find("td[data-label='卡券名称']").index() - 2;
        c12 = trCObj0.find("td[data-label='卡券面值']").index() - 2;
        c13 = trCObj0.find("td[data-label='领用方式']").index() - 2;
        c14 = trCObj0.find("td[data-label='期望最晚邮寄时间']").index() - 2;
        c15 = trCObj0.find("td[data-label='收获地址']").index() - 2;
        c16 = trCObj0.find("td[data-label='收货人']").index() - 2;
        c17 = trCObj0.find("td[data-label='寄货人']").index() - 2;
        c18 = trCObj0.find("td[data-label='快递单号']").index() - 2;
        c19 = trCObj0.find("td[data-label='基本单位']").index() - 2;
        c20 = trCObj0.find("td[data-label='收货人电话']").index() - 2;
        c21 = trCObj0.find("td[data-label='实际出库数量']").index() - 2;
    }
    setBussinessOption();
    addOnhCangeEvent();
    hideOrShowTableColumn($("[name='itemTypeAim']"));
    // 总价
    formUtil.tableFun.changeNotEditByTableParam({
        name: 'userAimTable',
        colNum: c6
    });
    // 成本中心代码
    formUtil.tableFun.chooseModelHiddenByTableParam({
        name: 'userAimTable',
        colNum: c7
    });
    // 成本中心名称
    formUtil.tableFun.chooseModelHiddenByTableParam({
        name: 'userAimTable',
        colNum: c8
    });
    // 预算控制模式
    formUtil.tableFun.chooseModelHiddenByTableParam({
        name: 'userAimTable',
        colNum: c9
    });
    // 成本中心预算
    formUtil.tableFun.chooseModelHiddenByTableParam({
        name: 'userAimTable',
        colNum: c10
    });
    // 商品名称
    formUtil.tableFun.changeNotEditByTableParam({
        name: 'userAimTable',
        colNum: c1
    });
    // 基本单位
    formUtil.tableFun.changeNotEditByTableParam({
        name: 'userAimTable',
        colNum: c19
    });
    //
    formUtil.changeNotEditByName("allTotalMoney");

    hideImportButton();

    var activityName = $("#activityName").val();
    var pageType = $("#pageType").val();
    if (activityName == '提出物品领用申请' && pageType == 'startProcess') {
        // 发起人起草时隐藏导出按钮
        $("[name='userAimTable_export_btn']").hide();
        $("[name='isLiveBroadcast']").val("no");
        $("[name='costCenterChoose']").removeAttr("readonly");
        $("[name='costCenterChoose']").removeAttr("disabled");
        // 申请人环节窗体加载时显示申请人归属的成本中心
        setCostCenterByCondition();
        formUtil.tableFun.changeHiddenMustByTableParam({
            name: 'userAimTable',
            colNum: c13
        });
        $("[name='isKuaiDi']").val("yes");
        $("[name='isPresident']").val("no");
    } else {
        var allTotalMoney = $("[name='allTotalMoney']").val();
        $("[name='alreadyForzenMoney']").val(allTotalMoney);
    }
    //在进行出库打单环节时，显示快递单号且必填，其他环节隐藏
    deleverCodeHideOrShow();
    setTableColumnWidth();

    //隐藏导出按钮
    // var exportButtonArr = ["库存管理员领用和出库", "进行出库开单", "进行快递打单"];
    // if (exportButtonArr.indexOf(activityName) > -1) {
    //     $("[name='userAimTable']").find("tfoot").eq(0).show();
    //     $("[name='userAimTable_export_btn']").show();
    // } else {
    //     $("[name='userAimTable_export_btn']").hide();
    // }
    chaEditForCostPrice();
    $("#insTitle_input").attr("disabled", "disabled");
    //当前登录人
    // var userId = $("#userId").val();

    // if (activityName == '部门经理审批物品领用申请' && userId == "00000002") {
    //     $("[name='isPublicOrCustomer']").val("no");
    // }
    changeMust(null, 2);
});
function setTableColumnWidth() {
    formUtil.tableFun.giveTableColSetWidth({
        tableName: 'userAimTable',
        colArr: [{
            'aim': '500px'
        }]
    });
    formUtil.tableFun.giveTableColSetWidth({
        tableName: 'userAimTable',
        colArr: [{
            'homeAddress': '500px'
        }]
    });
    formUtil.tableFun.givePCTableSetWidth({
        "tableWidthJson": {
            "userAimTable": "3000px"
        }
    });
}
function chaEditForCostPrice(obj) {
    // var val = $(obj).val();
    var text = $("[name='itemType'] option:selected").text();
    // if(val&&val!="selectOption"){
    if (text == "固定资产") {
        formUtil.tableFun.changeEditByTableParam({
            name: 'userAimTable',
            colNum: c3//成本价
        });
    } else {
        formUtil.tableFun.changeNotEditByTableParam({
            name: 'userAimTable',
            colNum: c3
        });
    }
    // }else{

    // }
}
//生成流程主题规则
function setInsTitleByBussinessName(obj) {
    var bussinessName = $(obj).find("option:selected").text();
    var itemType = $("[name='itemType']").find("option:selected").text();
    var userName = $("#userName").val();
    var insTitle = "";
    var currentdate = getNowFormatDate();
    if (currentdate && userName && itemType && bussinessName) {
        insTitle = currentdate + userName + "的" + itemType + "类" + bussinessName + "申请";
        $("#insTitle_input").val(insTitle);
    }
}

function getNowFormatDate() {
    var date = new Date();
    var seperator1 = "-";
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var strDate = date.getDate();
    if (month >= 1 && month <= 9) {
        month = "0" + month;
    }
    if (strDate >= 0 && strDate <= 9) {
        strDate = "0" + strDate;
    }
    var currentdate = month + "月" + strDate + "日";
    return currentdate;
}

//加载业务事项选项
function setBussinessOption() {
    var num = Date.now();

    // $("[name='itemType']").removeAttr("data-value");
    var tierParentCode = 'itemAim'
    $.ajax({
        url: common.getPath() + '/dictionaryTier/selectDictionaryTierList?tierParentCode=' + tierParentCode + '&pageSize=20',
        type: 'post',
        contentType: "application/json;charset=utf-8",
        async: false,
        success: function(result) {
            for (var i = 0; i < result.data.list.length; i++) {
                $("[name='itemType']").append("<option value=" + result.data.list[i].tierCode + ">" + result.data.list[i].tierName + "</option>");
            }
            common.initSelect();
            setBussinessChildOption($("[name='itemType']"), 0);
            setWarehouseChildOption($("[name='itemType']"), 0);
        },
        error: function(result) {}
    });

    console.log("setBussinessOption:" + (Date.now() - num));
}

//级联业务事项
function setBussinessChildOption(obj, id) {
    var subject_type = $(obj).val();
    var activityName = $("#activityName").val();
    var pageType = $("#pageType").val();
    if (id == 1 && activityName == '提出物品领用申请' && pageType != 'startProcess') {
        $("[name='itemTypeAim']").removeAttr("data-value");
    }
    $("[name='itemTypeAim']").empty();
    $("[name='itemType']").removeAttr("data-value");

    var pageType = $("#pageType").val();
    $.ajax({
        url: common.getPath() + '/dictionaryTier/selectDictionaryTierList?tierParentCode=' + subject_type + '&pageSize=20',
        type: 'post',
        contentType: "application/json;charset=utf-8",
        async: false,
        success: function(result) {
            $("[name='itemTypeAim']").append("<option value=" + "" + ">" + "---请选择---" + "</option>");
            for (var i = 0; i < result.data.list.length; i++) {
                $("[name='itemTypeAim']").append("<option value=" + result.data.list[i].tierCode + ">" + result.data.list[i].tierName + "</option>");
            }
            common.initSelect();

        },
        error: function(result) {}
    });
}
//级联仓库
function setWarehouseChildOption(obj, id) {

    var subject_type = $(obj).val();
    var activityName = $("#activityName").val();
    var pageType = $("#pageType").val();
    if (id == 1 && activityName == '提出物品领用申请' && pageType != 'startProcess') {
        $("[name='wareHouse']").removeAttr("data-value");
    }
    $("[name='wareHouse']").empty();
    $("[name='itemType']").removeAttr("data-value");

    //成品厂&RDC
    var activityArr = ["itemAim01", "itemAim07", "itemAim02", "itemAim03", "itemAim04", "itemAim09", "itemAim10"];
    //行政仓&RDC
    var activityArr2 = ["itemAim05", "itemAim08"];
    //各子公司财务部
    var activityArr3 = ["itemAim06"];
    var parentCode = "";
    if (activityArr.indexOf(subject_type) > -1) {
        parentCode = "itemAim01User";
    } else if (activityArr2.indexOf(subject_type) > -1) {
        parentCode = "itemAim02User";
    } else if (activityArr3.indexOf(subject_type) > -1) {
        parentCode = "itemAim03User";
    }
    if (parentCode) {
        var pageType = $("#pageType").val();
        $.ajax({
            url: common.getPath() + '/dictionaryTier/selectDictionaryTierList?tierParentCode=' + parentCode + '&pageSize=20',
            type: 'post',
            contentType: "application/json;charset=utf-8",
            async: false,
            success: function(result) {
                $("[name='wareHouse']").append("<option value=" + "" + ">" + "---请选择---" + "</option>");
                for (var i = 0; i < result.data.list.length; i++) {
                    $("[name='wareHouse']").append("<option value=" + result.data.list[i].tierCode + ">" + result.data.list[i].tierName + "</option>");
                }

                common.initSelect();
            },
            error: function(result) {}
        });
    }

}

function getSysRoleAndSet() {
    $("[name='roleUid']").val("sysRole:a00946d11118486c9a26d2fd648bb1d5");
    var roleUid = $("[name='roleUid']").val();
    $.ajax({
        url: common.getPath() + '/sysUser/searchByRole?roleUid=' + roleUid,
        type: 'post',
        contentType: "application/json;charset=utf-8",
        success: function(result) {
            if (result.status == 0) {
                for (var i = 0; i < result.data.length; i++) {
                    $("[name='select_niJG']").append("<option value=" + result.data[i].userUid + ">" + result.data[i].userName + "(" + result.data[i].userUid + ")" + "</option>");
                }
                common.initSelect();
            } else {
                layer.alert(result.msg);

            }
        },
        error: function(result) {}
    });
}
function cleanValue() {

    formUtil.tableFun.clearTargetObjValueByParam({
        name: 'userAimTable'
    });
    $("[name='userAimTable'] tbody").find("tr:gt(0)").remove();
    $("[name='allTotalMoney']").val("0");
    layui.form.render("select");
}

function calculatedPrice(obj) {
    var id = $(obj).parent().attr("data-label");
    var costPrice = 0.0;
    var numbers = 0;
    if (id == "成本价(基本单位)") {
        costPrice = parseFloat($(obj).val());
        numbers = $(obj).parent().parent().find("td[data-label='数量(基本单位)']").find("input").val();
        checkAndfomartNumber(obj, 8, 2);
    } else if (id == "卡券面值") {
        costPrice = parseFloat($(obj).val());
        numbers = $(obj).parent().parent().find("td[data-label='数量(基本单位)']").find("input").val();
        checkAndfomartNumber(obj, 8, 2);
    } else {
        var text = $("[name='itemType'] option:selected").text();

        if (text == "卡券") {
            costPrice = $(obj).parent().parent().find("td[data-label='卡券面值']").find("input").val();

        } else {
            costPrice = $(obj).parent().parent().find("td[data-label='成本价(基本单位)']").find("input").val();

        }
        numbers = $(obj).val();
        // checkAndfomartNumber(obj,8,2);
    }

    var total = NumUtil.multiply(costPrice, numbers, 2)
    total = isNaN(total) ? 0 : total;
    $(obj).parent().parent().find("td[data-label='总价']").find("input").val(total);
    checkAndfomartNumber($(obj).parent().parent().find("td[data-label='总价']").find("input"), 8, 2);
    var allTotal = 0;

    var styleMobile = $("#tr_table").parent().parent().parent().attr("style");
    if (common.isMobile() && styleMobile != undefined && styleMobile.indexOf("display: block") > -1) {
        var index = $(tdObj).parent().index();
        $("[name='userAimTable'] tbody").find("tr").eq(index).find("td[data-label='总价']").find("input").val(total);
    }
    $("[name='userAimTable'] tbody").find("tr").each(function() {
        var totalM = parseFloat($(this).find("td[data-label='总价']").find("input").val());
        totalM = isNaN(totalM) ? 0 : totalM;
        allTotal += totalM;
    })
    $("[name='allTotalMoney']").val(allTotal);
    checkAndfomartNumber($("[name='allTotalMoney']"), 8, 2);
}

function calculatedPriceForUpload() {
    var allTotal = 0;
    var costPrice = 0.0;
    var numbers = 0;
    $("[name='userAimTable'] tbody").find("tr").each(function() {
        costPrice = parseFloat($(this).find("td[data-label='成本价(基本单位)']").find("input").val());
        numbers = $(this).find("td[data-label='数量(基本单位)']").find("input").val();
        var total = costPrice * numbers;
        total = isNaN(total) ? 0 : total;
        $(this).find("td[data-label='总价']").find("input").val(total);
        checkAndfomartNumber($(this).find("td[data-label='总价']").find("input"), 8, 2);
        var totalM = parseFloat($(this).find("td[data-label='总价']").find("input").val());
        totalM = isNaN(totalM) ? 0 : totalM;
        allTotal += totalM;
    })
    $("[name='allTotalMoney']").val(allTotal);
    checkAndfomartNumber($("[name='allTotalMoney']"), 8, 2);
}
function getAllTotalMoney(obj) {}
function addOnhCangeEvent() {
    $("[name = 'userAimTable'] tbody td[data-label='成本价(基本单位)']").find("input").attr("onchange", "calculatedPrice(this);checkAndfomartNumber(this,8,2);");
    $("[name = 'userAimTable'] tbody td[data-label='卡券面值']").find("input").attr("onchange", "calculatedPrice(this);checkAndfomartNumber(this,8,2);");
    $("[name = 'userAimTable'] tbody td[data-label='数量(基本单位)']").find("input").attr("onchange", "calculatedPrice(this);");
    $("[name = 'userAimTable'] tbody td[data-label='实际出库数量']").find("input").attr("onchange", "calculatedPrice(this);");
    $("[name = 'userAimTable'] tbody td[data-label='商品编码']").find("input").attr("onchange", "getGoodName(this);");
    $("[name = 'userAimTable'] tbody td[data-label='领用方式']").find("select").attr("onchange", "changeMust(this,1);");
    $("[name = 'costCenterChoose']").attr("onchange", "judgeCostCenterExistForProject(this);");
}
function hideImportButton() {
    var itemType = $("[name='itemType']").val();
    var pageType = $("#pageType").val();
    var activityName = $("#activityName").val();
    if (activityName == '提出物品领用申请') {
        switch (itemType) {
            case "itemAim06":
                $("[name='userAimTable']").find("tfoot").eq(0).find("button").hide();
                break;
            case "itemAim05":
                $("[name='userAimTable']").find("tfoot").eq(0).find("button").hide();
                break;
            case "selectOption":
                $("[name='userAimTable']").find("tfoot").eq(0).find("button").hide();
                break;
            default:
                $("[name='userAimTable']").find("tfoot").eq(0).find("button").show();
                break
        }
    } else {
        $("[name='userAimTable']").find("tfoot").eq(0).find("button").hide();
    }
    if (activityName == '提出物品领用申请' && pageType == 'startProcess') {
        $("[name='userAimTable_export_btn']").hide();
    } else {
        // 显示导出按钮
        $("[name='userAimTable_export_btn']").show();
    }

}

common.chooseDepart = function(elementId) {
    var index = layer.open({
        type: 2,
        title: '选择部门或成本中心',
        shadeClose: true,
        shade: 0.3,
        area: ['600px', '500px'],
        content: common.chooseDepartPath(elementId),
        success: function(layero, lockIndex) {
            var body = layer.getChildFrame('body', lockIndex);
            body.find('button#addDepart').on('click', function() {
                layer.close(lockIndex);
            });
            body.find('button#close').on('click', function() {
                layer.close(lockIndex);
            });
            body.find('button#costCenterSure').on('click', function() {
                layer.close(lockIndex);
            });
            body.find('button#costCenterClose').on('click', function() {
                layer.close(lockIndex);
            });
        }
    });
}
common.chooseDicData = function(id, dicUid, dicCode) {

    var title = "";
    if (id == "choose_value_JDFG_hide") {
        title = "项目信息";
        var boo = queryCenterProject();
        if (!boo) {
            return;
        }
    }

    var index = layer.open({
        type: 2,
        title: title,
        shadeClose: true,
        shade: 0.3,
        offset: "2%",
        area: ['600px', '90%'],
        content: common.chooseDicDataPath(id, dicUid, dicCode),
        success: function(layero, lockIndex) {
            var body = layer.getChildFrame('body', lockIndex);
            body.find('button#cancel_btn').on('click', function() {
                layer.close(lockIndex);
            });
            body.find('button#sure_btn').on('click', function() {
                layer.close(lockIndex);
            });
        }
    });
}

//根据收款人类型选择数据重写选值组件打开新的自定义页面
common.chooseDicDataPath = function(id, dicUid, dicCode) {
    var bussinessName = $("[name='bussiness_name']").val();
    var tdName = $("#" + id).parent().attr("data-label");
    if (id == "choose_value_JDFG_hide") {
        var costCenter = $("[name='costCenterChoose']").val();
        return common.getPath() + "/LYFData/queryProject?elementId=" + id + "&isSingle=true&costCenter=" + costCenter + "&tbpmCode=" + bussinessName;
    }
}

function queryCenterProject() {
    //成本中心编码，这个成本中心编码怎么来，还需要问
    //判断是否项目报销
    var flag = false;
    var tbpmCode = $("[name='bussiness_name']").val();
    if (tbpmCode == "" || tbpmCode == undefined) {
        layer.msg("请先选择领用用途");
        flag = false;
        return flag;
    }
    var costCenterCode = $("[name='costCenterChoose']").val();
    if (!costCenterCode) {
        layer.msg("请选择成本中心");
        flag = false;
        return flag;
    }
    $.ajax({
        url: common.getPath() + '/LYFSynRB/queryCenterProject?costCenter=' + costCenterCode + '&tbpmCode=' + tbpmCode + '&pageSize=10&pageNum=1',
        type: 'get',
        contentType: "application/json;charset=utf-8",
        async: false,
        success: function(result) {
            if (result.data) {
                if (result.data.list.length == 0) {
                    layer.msg("当前成本中心:" + costCenterCode + "对应业务事项" + tbpmCode + " 下无项目信息");
                    flag = false;
                } else {
                    flag = true;
                }

            } else {
                layer.msg("接口异常");
                flag = false;
            }
            layui.form.render("select");
        }
    })

    return flag;
}

// //根据项目编号获取项目信息
function getProjectInfoByProjectNo(projectNumber) {// if (projectNumber) {
// $.ajax({
// url: common.getPath() + '/LYFSynRB/queryProjectInfo?projectNumber=' + projectNumber,
// type: 'get',
// contentType: "application/json;charset=utf-8",
// success: function (result) {
// if (result.code == "0") {
// $("[name='text_NT5r']").val(result.data.projectName);
// if ((result.data.projectLeader != null && result.data.projectLeader != undefined) && (result.data.projectLeaderNo != null && result.data.projectLeaderNo != undefined)) {
// $("[name='text_drR4']").val(result.data.projectLeader + "-" + result.data.projectLeaderNo);
// } else {
// $("[name='text_drR4']").val("");
// }

// $("[name='projectManager']").val(result.data.projectLeaderNo);
// $("[name='projectDirector']").val(result.data.projectDirectorNo);
// }
// },
// error: function (result) {

// }
// });
// }
}
//重写excel导入数据填充到数据表格补充函数
function fileUploadChangeEvent() {
    $("[name='userAimTable'] tbody").find("tr").each(function() {
        $(this).find("td[data-label='数量(基本单位)']").find("input").change();
    });
}
//获取商品名称
function getGoodName(obj) {
    var goodCode = $(obj).val();
    var activityName = $("#activityName").val();
    var itemType = $("[name='itemType'] option:selected").text();
    //物品类型
    var itemTypeAim = $("[name='itemTypeAim'] option:selected").text();
    //物品领用用途
    var url = "";
    // if (activityName == '申请人填写') {
    if (goodCode.trim() != "") {
        if (itemType == "基金会领用") {
            $.ajax({
                url: common.getPath() + '/sysGood/getSkuSalePriceBySkuIdAndChannelCode?skuCodes=' + goodCode + "&channelCode=G20000000_100",
                type: 'post',
                async: false,
                contentType: "application/json;charset=utf-8",
                success: function(result) {
                    if (result.status == '0' && result.data.length > 0) {
                        $(obj).parent().parent().find("td[data-label='商品名称']").find("input").val(result.data[0].skuName);
                        $(obj).parent().parent().find("td[data-label='基本单位']").find("input").val(result.data[0].saleUnitCode);
                        $(obj).parent().parent().find("td[data-label='成本价(基本单位)']").find("input").val(result.data[0].salePrice);
                    } else {
                        layer.msg("商品编码不存在!");
                        $(obj).val("");
                        $(obj).parent().parent().find("td[data-label='商品名称']").find("input").val("");
                        return;
                    }
                }
            });
        } else {
            $.ajax({
                url: common.getPath() + '/sysGood/getGoodInfo?skuCode=' + goodCode,
                type: 'post',
                async: false,
                contentType: "application/json;charset=utf-8",
                success: function(result) {
                    if (result.status == '0') {
                        $(obj).parent().parent().find("td[data-label='商品名称']").find("input").val(result.data.spuName);
                        $(obj).parent().parent().find("td[data-label='基本单位']").find("input").val(result.data.spuUnitName);
                    } else {
                        layer.msg("商品编码不存在!");
                        $(obj).val("");
                        $(obj).parent().parent().find("td[data-label='商品名称']").find("input").val("");
                        return;
                    }
                }
            });
        }

    }

    // var index=text.indexOf("-")+1;
    // text=text.substring(index);
    if (itemType != "卡券" && itemTypeAim != "对外捐赠") {
        getMovePriceInfoByOne(obj);
    }
    var index = $(obj).parent().parent().index();
    formUtil.tableFun.clearTargetObjValueByParam({
        name: 'userAimTable',
        colNum: c4,
        //科目编码
        rowNum: index
    });
    // }
}
function giveBussinessName(obj) {
    var val = $(obj).val();
    var index = val.indexOf("-itemAimType");
    var type = val.substring(0, index);
    $("[name='bussiness_name']").val(type);
    var itemType = $("[name='itemType'] option:selected").text();
    var itemTypeAim = $("[name='itemTypeAim'] option:selected").text();

    if (itemType == "基金会领用") {
        $("[name='isFoundation']").val("yes");
    } else {
        $("[name='isFoundation']").val("no");
    }

    if (itemTypeAim == "客勤领用" || itemTypeAim == "公关维护") {
        $("[name='isPublicOrCustomer']").val("yes");
    } else {
        $("[name='isPublicOrCustomer']").val("no");
    }

}
//资产类时隐藏商品编码
function hideOrShowTableColumn(obj) {

    var activityName = $("#activityName").val();
    var text = $("[name='itemType'] option:selected").text();
    // var index=text.indexOf("-")+1;
    // text=text.substring(index);
    // 库存管理员领用和出库显示实际出库数量
    var showActualNum = ['进行出库开单', '进行快递打单'];
    if (activityName == "库存管理员领用和出库") {
        formUtil.tableFun.chooseModelShowByTableParam({
            name: 'userAimTable',
            colNum: c21
        });
        formUtil.tableFun.changeShowMustByTableParam({
            name: 'userAimTable',
            colNum: c21
        });
        formUtil.tableFun.changeEditByTableParam({
            name: 'userAimTable',
            colNum: c21
        });

    } else {
        if (showActualNum.indexOf(activityName) > -1) {
            formUtil.tableFun.chooseModelShowByTableParam({
                name: 'userAimTable',
                colNum: c21
            });
        } else {
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c21
            });
        }

        formUtil.tableFun.changeHiddenMustByTableParam({
            name: 'userAimTable',
            colNum: c21
        });
    }
    switch (text) {
        case "固定资产":
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c19
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c19
            });
            // 商品编码
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c0
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c0
            });

            // 商品名称
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c1
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c1
            });

            // 资产名称
            formUtil.tableFun.chooseModelShowByTableParam({
                name: 'userAimTable',
                colNum: c2
            });
            formUtil.tableFun.changeShowMustByTableParam({
                name: 'userAimTable',
                colNum: c2
            });
            // 资产名称

            // 卡券名称
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c11
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c11
            });
            // 卡券面值
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c12
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c12
            });
            // 成本价(基本单位)
            if (activityName == '资产主管判断库存') {
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c3
                });
            } else {
                formUtil.tableFun.changeHiddenMustByTableParam({
                    name: 'userAimTable',
                    colNum: c3
                });
            }
            formUtil.tableFun.chooseModelShowByTableParam({
                name: 'userAimTable',
                colNum: c3
            });
            hideForCommodity();
            break;

        case "卡券":
            // 商品编码
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c0
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c0
            });

            // 商品名称
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c1
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c1
            });

            // 资产名称
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c2
            });
            // 资产名称
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c2
            });
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c19
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c19
            });
            // 卡券名称
            formUtil.tableFun.chooseModelShowByTableParam({
                name: 'userAimTable',
                colNum: c11
            });
            formUtil.tableFun.changeShowMustByTableParam({
                name: 'userAimTable',
                colNum: c11
            });
            // 卡券面值
            formUtil.tableFun.chooseModelShowByTableParam({
                name: 'userAimTable',
                colNum: c12
            });
            formUtil.tableFun.changeShowMustByTableParam({
                name: 'userAimTable',
                colNum: c12
            });

            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c3
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c3
            });
            hideForCommodity();
            break;
        default:

            formUtil.tableFun.chooseModelShowByTableParam({
                name: 'userAimTable',
                colNum: c19
            });
            formUtil.tableFun.changeShowMustByTableParam({
                name: 'userAimTable',
                colNum: c19
            });
            // 商品编码
            formUtil.tableFun.chooseModelShowByTableParam({
                name: 'userAimTable',
                colNum: c0
            });
            formUtil.tableFun.changeShowMustByTableParam({
                name: 'userAimTable',
                colNum: c0
            });

            // 商品名称
            formUtil.tableFun.chooseModelShowByTableParam({
                name: 'userAimTable',
                colNum: c1
            });
            formUtil.tableFun.changeShowMustByTableParam({
                name: 'userAimTable',
                colNum: c1
            });

            // 资产名称
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c2
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c2
            });

            // 卡券名称
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c11
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c11
            });
            // 卡券面值
            formUtil.tableFun.chooseModelHiddenByTableParam({
                name: 'userAimTable',
                colNum: c12
            });
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c12
            });

            // 成本价(基本单位)
            formUtil.tableFun.changeHiddenMustByTableParam({
                name: 'userAimTable',
                colNum: c3
            });
            formUtil.tableFun.chooseModelShowByTableParam({
                name: 'userAimTable',
                colNum: c3
            });
            hideForCommodity();
            break;
    }
}
function hideForCommodity(obj) {
    var text = $("[name='itemType'] option:selected").text();
    if (text == "商品" || text == "赠品" || text == "试尝品" || text == "基金会领用") {
        formUtil.tableFun.chooseModelShowByTableParam({
            name: 'userAimTable',
            colNum: c13//科目编码
        });
        formUtil.tableFun.chooseModelShowByTableParam({
            name: 'userAimTable',
            colNum: c14//科目编码
        });
        formUtil.tableFun.chooseModelShowByTableParam({
            name: 'userAimTable',
            colNum: c15//科目编码
        });
        formUtil.tableFun.chooseModelShowByTableParam({
            name: 'userAimTable',
            colNum: c16//科目编码
        });
        formUtil.tableFun.chooseModelShowByTableParam({
            name: 'userAimTable',
            colNum: c17//科目编码
        });
        formUtil.tableFun.chooseModelShowByTableParam({
            name: 'userAimTable',
            colNum: c20//科目编码
        });
        //电商直播，领用方式必选
        formUtil.tableFun.changeShowMustByTableParam({
            name: 'userAimTable',
            colNum: c13
        });
    } else {
        //非商品类时，隐藏字段
        formUtil.tableFun.chooseModelHiddenByTableParam({
            name: 'userAimTable',
            colNum: c13//科目编码
        });
        formUtil.tableFun.chooseModelHiddenByTableParam({
            name: 'userAimTable',
            colNum: c14//科目编码
        });
        formUtil.tableFun.chooseModelHiddenByTableParam({
            name: 'userAimTable',
            colNum: c15//科目编码
        });
        formUtil.tableFun.chooseModelHiddenByTableParam({
            name: 'userAimTable',
            colNum: c16//科目编码
        });
        formUtil.tableFun.chooseModelHiddenByTableParam({
            name: 'userAimTable',
            colNum: c17//科目编码
        });
        formUtil.tableFun.chooseModelHiddenByTableParam({
            name: 'userAimTable',
            colNum: c20//科目编码
        });
        formUtil.tableFun.changeHiddenMustByTableParam({
            name: 'userAimTable',
            colNum: c13
        });
        //非商品类时，隐藏字段
    }
    var activityName = $("#activityName").val();
    if (activityName == "提出物品领用申请") {
        changeMust(obj, 2);
    }

}
function changeHideOrShowForTv() {

    // $("[name='userAimTable'] tbody").find("tr").each(function() {
    //     var val = $(this).find("td[data-label='领用方式']").find("select").val();
    //     if (val == "紧急邮寄--顺丰承接" || val == "普通邮寄--正常仓库快递承接") {
    //         $("[name='isLiveBroadcast']").val("yes");
    //         return false;
    //     } else {
    //         $("[name='isLiveBroadcast']").val("no");
    //     }
    // })
    var wareHourse = $("[name='wareHouse']").find("option:selected").text();
    if (wareHourse == '电商成品仓' || wareHourse == '云商成品仓' || wareHourse == '科技成品仓') {
        $("[name='isLiveBroadcast']").val("yes");
    } else {
        $("[name='isLiveBroadcast']").val("no");
    }
}
function deleverCodeHideOrShow() {
    var activityName = $("#activityName").val();
    var pageType = $("#pageType").val();
    if (activityName == "进行快递打单") {

        formUtil.tableFun.chooseModelShowByTableParam({
            name: 'userAimTable',
            colNum: c18//科目编码
        });
        formUtil.tableFun.changeEditByTableParam({
            name: 'userAimTable',
            colNum: c18//科目编码
        });

    } else {
        formUtil.tableFun.chooseModelHiddenByTableParam({
            name: 'userAimTable',
            colNum: c18//科目编码
        });
        formUtil.tableFun.changeHiddenMustByTableParam({
            name: 'userAimTable',
            colNum: c18
        });
    }
}
function chooseUser(obj) {
    var text = $("[name='wareHouse'] option:selected").text();
    if (text == "总部成品仓" || text == "电商成品仓" || text == "科技成品仓" || text == "云商成品仓") {
        $("[name='headqFiniProWarhou']").val("yes");
    } else {
        $("[name='headqFiniProWarhou']").val("no");
    }
    if (text == "总部行政仓") {
        $("[name='headqAdmistiProWarhou']").val("yes");
    } else {
        $("[name='headqAdmistiProWarhou']").val("no");
    }
    var tierCode = $(obj).val();
    if (tierCode) {
        $.ajax({
            url: common.getPath() + '/dictionaryTier/getDictionaryTierDataList?tierCode=' + tierCode,
            type: 'get',
            contentType: "application/json;charset=utf-8",
            success: function(result) {
                var arr = result.dataList;
                if (arr.length == 1 && (arr[0].tierDescription)) {
                    $("[name='chooseRdcUser']").val(arr[0].tierDescription);
                } else {
                    layer.msg("RDC管理员配置有误,请联系管理员!");
                    $(obj).val("");

                }
                layui.form.render("select");
            }
        });
    }

}
function changeMust(obj, id) {
    if (id == 1) {
        var index = $(obj).parent().parent().index();
        var itemType = $(obj).val();
        switch (itemType) {
            case "紧急邮寄--顺丰承接":
                // formUtil.tableFun.changeShowMustByTableParam({
                // name: 'userAimTable',
                // colNum: c13,
                // //科目编码
                // rowNum: index
                // });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c14,
                    //科目编码
                    rowNum: index
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c15,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c16,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c17,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c20,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c18,
                    rowNum: index//科目编码
                });
                break;
            case "普通邮寄--正常仓库快递承接":
                // formUtil.tableFun.changeShowMustByTableParam({
                // name: 'userAimTable',
                // colNum: c13,
                // rowNum: index//科目编码
                // });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c14,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c15,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c16,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c17,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c20,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeShowMustByTableParam({
                    name: 'userAimTable',
                    colNum: c18,
                    rowNum: index//科目编码
                });
                break;

            default:
                // formUtil.tableFun.changeHiddenMustByTableParam({
                // name: 'userAimTable',
                // colNum: c13,
                // rowNum: index//科目编码
                // });
                formUtil.tableFun.changeHiddenMustByTableParam({
                    name: 'userAimTable',
                    colNum: c14,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeHiddenMustByTableParam({
                    name: 'userAimTable',
                    colNum: c15,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeHiddenMustByTableParam({
                    name: 'userAimTable',
                    colNum: c16,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeHiddenMustByTableParam({
                    name: 'userAimTable',
                    colNum: c17,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeHiddenMustByTableParam({
                    name: 'userAimTable',
                    colNum: c20,
                    rowNum: index//科目编码
                });
                formUtil.tableFun.changeHiddenMustByTableParam({
                    name: 'userAimTable',
                    colNum: c18,
                    rowNum: index//科目编码
                });
                break
        }
    }
    if (id == 2) {
        $("[name='userAimTable'] tbody").find("tr").each(function() {
            var index = $(this).index();
            var itemType = $(this).find("td[data-label='领用方式']").find("select").val();
            switch (itemType) {
                case "紧急邮寄--顺丰承接":
                    // formUtil.tableFun.changeShowMustByTableParam({
                    // name: 'userAimTable',
                    // colNum: c13,
                    // //科目编码
                    // rowNum: index
                    // });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c14,
                        //科目编码
                        rowNum: index
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c15,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c16,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c17,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c20,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c18,
                        rowNum: index//科目编码
                    });
                    break;
                case "普通邮寄--正常仓库快递承接":
                    // formUtil.tableFun.changeShowMustByTableParam({
                    // name: 'userAimTable',
                    // colNum: c13,
                    // rowNum: index//科目编码
                    // });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c14,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c15,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c16,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c17,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c20,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeShowMustByTableParam({
                        name: 'userAimTable',
                        colNum: c18,
                        rowNum: index//科目编码
                    });
                    break;

                default:
                    // formUtil.tableFun.changeHiddenMustByTableParam({
                    // name: 'userAimTable',
                    // colNum: c13,
                    // rowNum: index//科目编码
                    // });
                    formUtil.tableFun.changeHiddenMustByTableParam({
                        name: 'userAimTable',
                        colNum: c14,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeHiddenMustByTableParam({
                        name: 'userAimTable',
                        colNum: c15,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeHiddenMustByTableParam({
                        name: 'userAimTable',
                        colNum: c16,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeHiddenMustByTableParam({
                        name: 'userAimTable',
                        colNum: c17,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeHiddenMustByTableParam({
                        name: 'userAimTable',
                        colNum: c20,
                        rowNum: index//科目编码
                    });
                    formUtil.tableFun.changeHiddenMustByTableParam({
                        name: 'userAimTable',
                        colNum: c18,
                        rowNum: index//科目编码
                    });
                    break
            }

        });
    }
    deleverCodeHideOrShow();
}

//选择部门的路径重构公用方法打开自定义页面
common.chooseDepartPath = function(id) {
    var companyNum = $("#companyNum").val();
    return common.getPath() + "/LYFData/queryAllCostCenter?elementId=" + id + "&companyNum=" + companyNum;
}

//判断填写的金额是否超过预算
function judgeIsOverBudget() {
    var itemCode = $("[name='itemCode']").val();
    if (itemCode) {
        return judgeIsOverItemBudget();
    }
    // 定义已经冻结的钱为0
    var alreadyForzenMoney = 0;

    var bussinessName = $("[name='bussiness_name']").val();
    var activityName = $("#activityName").val();
    var sysDate = new Date();
    var flag = false;
    $("[name='userAimTable'] tbody").find("tr").each(function() {
        if (bussinessName == "固定资产") {
            $(this).find("td[data-label='预算控制模式']").find("input").val("不控制");
        }
        var amount = 0;
        var costCenter = $(this).find("td[data-label='成本中心代码']").find("input[type='text']").val();
        var controlType = $(this).find("td[data-label='预算控制模式']").find("input").val();
        var budget = parseFloat($(this).find("td[data-label='成本中心预算']").find("input").val());
        if (activityName == "库存管理员领用和出库") {
            var alreadyForzenMoney2 = parseFloat($("[name='alreadyForzenMoney']").val());
            var alreadyForzenMoney3 = isNaN(alreadyForzenMoney2)
            alreadyForzenMoney = alreadyForzenMoney3 ? 0 : alreadyForzenMoney2;
        }
        var isError = false;
        budget = isNaN(budget) ? 0 : budget;
        $("[name='userAimTable'] tbody").find("tr").each(function() {
            var costCenter1 = $(this).find("td[data-label='成本中心代码']").find("input[type='text']").val();
            if (costCenter == costCenter1) {
                var total = parseFloat($(this).find("td[data-label='总价']").find("input").val());
                var dontMoney = isNaN(total)
                if (dontMoney) {
                    layer.alert("总价有误，请检查后再提交！");
                    isError = true;
                    return false;
                }
                total = dontMoney ? 0 : total;
                amount += total;
            }

        });
        if (isError) {
            return flag;
        }
        if (controlType == '不控制') {
            flag = true;
        } else {
            var finalCanUseBudget = budget + alreadyForzenMoney;
            if (amount <= finalCanUseBudget) {
                flag = true;
            } else {
                flag = false;
                layer.alert(costCenter + "成本中心对应科目" + bussinessName + "预算金额不足,该成本中心当前期间预算为:" + finalCanUseBudget);
                return flag;
            }
        }
    });

    return flag;
}
//判断填写的金额是否超出对应项目预算
function judgeIsOverItemBudget() {
    var flag = false;
    var total = parseFloat($("[name='allTotalMoney']").val());
    total = isNaN(total) ? 0 : total;
    var projectCostCenter = $("[name='costCenterChoose']").val();
    var subjectType = $("[name='subject_type']").val();
    var tableName = "userAimTable";
    var itemBudget = $("[name='" + tableName + "'] tbody").find("tr:eq(0)").find("td[data-label='成本中心预算']").find("input").val();
    itemBudget = isNaN(parseFloat(itemBudget)) ? 0 : parseFloat(itemBudget);
    var controlType = $("[name='" + tableName + "'] tbody").find("tr:eq(0)").find("td[data-label='预算控制模式']").find("input").val();
    if (controlType == '不控制') {
        flag = true;
        return flag;
    }
    if (total <= itemBudget) {
        flag = true;
    } else {
        layer.alert(projectCostCenter + "成本中心预算金额不足,该成本中心当前期间预算为:" + itemBudget);
        flag = false;
    }
    return flag;

}
function getPresidentByDepartmentId() {

    var departmentId = $("[name='costCenterChoose']").parent().find("input[type=hidden]").val();
    if (departmentId) {
        $.ajax({
            url: common.getPath() + '/selectUser/getPresidentByDepartmentId?departmentId=' + departmentId,
            type: 'post',
            dataType: 'json',
            contentType: 'application/json;charset=UTF-8',
            async: false,
            success: function(result) {
                if (result.status == 0) {
                    if (result.data) {
                        var presidentNo = result.data.userNo;
                        if (presidentNo == "00000002") {
                            $("[name='isPresident']").val("yes");
                        } else {
                            $("[name='isPresident']").val("no");
                        }
                    } else {
                        layer.alert("成本中心部门:" + departmentId + "未找到总裁")
                        $("[name='isPresident']").val("no");
                    }
                } else {
                    $("[name='isPresident']").val("no");
                }
            },
            error: function(result) {}
        });
    }
}

function check_before_submit() {
    var activityName = $("#activityName").val();
    if (activityName == '提出物品领用申请') {

        getPresidentByDepartmentId();
        var isFoundationVal = $("[name='isFoundation']").val();
        // 基金会领用隐藏域字段是3月10日上线的，这次版本加了两个字段，项目编码，是否基金会领用，如果复制以前版本流程，会导致网关字段缺少，由于这个字段是必须选中基金会领用才会带出的，以前版本没有这个选项，所有这里直接赋值为no，为什么赋值为no，是因为空字符串不抽值，为什么项目编码不赋值，因为项目编码是选值组件，选值组件会抽值，即使为空也会抽值。
        if (isFoundationVal == "" || isFoundationVal == undefined) {
            $("[name='isFoundation']").val("no");
        }
        changeHideOrShowForTv();
        setCostCenterByCondition1();
        setInsTitleByBussinessName("[name='itemTypeAim']");
        var flag1 = getBudget1();
        if (!flag1) {
            return;
        }

        var flag2 = judgeIsOverBudget();
        if (flag2 && flag1) {
            // 设置库存管理员领用和出库的值，防止赋值版本时，值不同，客户又不想清空表格
            var wareHouse = $("[name='wareHouse'] option:selected").text();
            var roleName = "物品领用" + wareHouse;
            var chooseRdcUser = $("[name='chooseRdcUser']").val();
            if (roleName != chooseRdcUser) {
                $("[name='chooseRdcUser']").val(roleName);
            }
            return true;
        } else {
            return false;
        }
    } else if (activityName == '库存管理员领用和出库') {
        var flag1 = getBudget1();
        if (!flag1) {
            return;
        }

        var flag2 = judgeIsOverBudget();
        if (flag2 && flag1) {
            return true;
        } else {
            return false;
        }
    } else {
        return true;
    }
}

//提供手输方法查询成本中心是否存在---项目报销
function judgeCostCenterExistForProject(obj) {

    var kostl = $(obj).val();
    $.ajax({
        url: common.getPath() + '/LYFData/selectCostCenterAndDepartmentByKostl?kostl=' + kostl,
        type: 'post',
        dataType: 'json',
        contentType: 'application/json;charset=UTF-8',
        async: false,
        success: function(result) {
            if (result.status == 0) {
                if (result.data.length > 1 || !result.data[0].departmentId) {
                    layer.alert("成本中心:" + kostl + "存在多个部门或没有对应到部门,请找人事协调")
                    $(obj).val("");
                    $("[name='text_tCDJ']").val("");
                } else {
                    $(obj).parent().find("input[type='text']").val(result.data[0].kostl);
                    $(obj).parent().find("input[type='hidden']").val(result.data[0].departmentId);
                    $("[name='text_tCDJ']").val(result.data[0].cstctrShortText);
                    setCostCenterByCondition1(obj);
                }
            } else {
                layer.alert(result.msg);
                $(obj).val("");
                $("[name='text_tCDJ']").val("");
            }
        },
        error: function(result) {}
    });
}
function getMovePriceInfoByOne(obj) {
    var hourse = $("[name='wareHouse']").val();
    if (!hourse) {
        layer.msg("请先填写仓库！");
        $(obj).val("");
        $(obj).parent().parent().find("td[data-label='成本价(基本单位)']").find("input").val("");
        return;
    }
    hourse = $("[name='wareHourseCode']").val();
    if (!hourse || hourse == "不查") {
        layer.msg("请手填成本价！");
        return;
    }
    var good = $(obj).val();

    if (good && hourse) {
        $.ajax({
            url: common.getPath() + '/rbQuerySAPInfo/getMovePriceInfoByOne',
            type: 'post',
            dataType: 'json',
            data: JSON.stringify({
                "MATNR": good,
                "BWKEY": hourse
            }),
            contentType: "application/json;charset=utf-8",
            success: function(result) {
                if (result.success && result.obj) {
                    var str = result.obj.responseBody;
                    if (str) {
                        var jsonObj = JSON.parse(str);
                        var price = jsonObj.Body["ZMM_GET_VERPR.Response"].CT_VERPR.item.VERPR;
                        if (price) {
                            $(obj).parent().parent().find("td[data-label='成本价(基本单位)']").find("input").val(price);
                        }
                    } else {
                        layer.alert("商品" + good + "在SAP没有维护移动平均价信息！");
                        return;
                    }

                } else {
                    layer.alert("商品" + good + "在SAP没有维护移动平均价信息！");
                    return;
                }
            },
            error: function(result) {}
        });
    }

}
function rowChangeEvent(obj, sign) {
    if (sign != '1') {
        trCObj0 = $("[name='userAimTable']").find("tbody").find("tr").eq(0);
        c0 = trCObj0.find("td[data-label='商品编码'][class!='no_data']").index();
        c1 = trCObj0.find("td[data-label='商品名称']").index();
        c2 = trCObj0.find("td[data-label='资产名称']").index();
        c3 = trCObj0.find("td[data-label='成本价(基本单位)']").index();
        c4 = trCObj0.find("td[data-label='数量(基本单位)']").index();
        c5 = trCObj0.find("td[data-label='用途']").index();
        c6 = trCObj0.find("td[data-label='总价']").index();
        c7 = trCObj0.find("td[data-label='成本中心代码']").index();
        c8 = trCObj0.find("td[data-label='成本中心名称']").index();
        c9 = trCObj0.find("td[data-label='预算控制模式']").index();
        c10 = trCObj0.find("td[data-label='成本中心预算']").index();
        c11 = trCObj0.find("td[data-label='卡券名称']").index();
        c12 = trCObj0.find("td[data-label='卡券面值']").index();
        c13 = trCObj0.find("td[data-label='领用方式']").index();
        c14 = trCObj0.find("td[data-label='期望最晚邮寄时间']").index();
        c15 = trCObj0.find("td[data-label='收获地址']").index();
        c16 = trCObj0.find("td[data-label='收货人']").index();
        c17 = trCObj0.find("td[data-label='寄货人']").index();
        c18 = trCObj0.find("td[data-label='快递单号']").index();
        c19 = trCObj0.find("td[data-label='基本单位']").index();
        c20 = trCObj0.find("td[data-label='收货人电话']").index();
        c21 = trCObj0.find("td[data-label='实际出库数量']").index();
        if (common.isMobile()) {
            c0 = trCObj0.find("td[data-label='商品编码'][class!='no_data']").index() - 2;
            c1 = trCObj0.find("td[data-label='商品名称']").index() - 2;
            c2 = trCObj0.find("td[data-label='资产名称']").index() - 2;
            c3 = trCObj0.find("td[data-label='成本价(基本单位)']").index() - 2;
            c4 = trCObj0.find("td[data-label='数量(基本单位)']").index() - 2;
            c5 = trCObj0.find("td[data-label='用途']").index() - 2;
            c6 = trCObj0.find("td[data-label='总价']").index() - 2;
            c7 = trCObj0.find("td[data-label='成本中心代码']").index() - 2;
            c8 = trCObj0.find("td[data-label='成本中心名称']").index() - 2;
            c9 = trCObj0.find("td[data-label='预算控制模式']").index() - 2;
            c10 = trCObj0.find("td[data-label='成本中心预算']").index() - 2;
            c11 = trCObj0.find("td[data-label='卡券名称']").index() - 2;
            c12 = trCObj0.find("td[data-label='卡券面值']").index() - 2;
            c13 = trCObj0.find("td[data-label='领用方式']").index() - 2;
            c14 = trCObj0.find("td[data-label='期望最晚邮寄时间']").index() - 2;
            c15 = trCObj0.find("td[data-label='收获地址']").index() - 2;
            c16 = trCObj0.find("td[data-label='收货人']").index() - 2;
            c17 = trCObj0.find("td[data-label='寄货人']").index() - 2;
            c18 = trCObj0.find("td[data-label='快递单号']").index() - 2;
            c19 = trCObj0.find("td[data-label='基本单位']").index() - 2;
            c20 = trCObj0.find("td[data-label='收货人电话']").index() - 2;
            c21 = trCObj0.find("td[data-label='实际出库数量']").index() - 2;
        }
        var activityName = $("#activityName").val();
        if (activityName == "提出物品领用申请") {
            changeMust(obj, 2);
        }
    }
}
function setCostCenterByCondition1(obj) {
    var costCenterName = $("[name='text_tCDJ']").val();
    var departmentId = $("[name='costCenterChoose']").parent().find("input[type=hidden]").val();
    var kostl = $("[name='costCenterChoose']").parent().find("input[type=text]").val();
    $("[name='userAimTable'] tbody").find("tr").each(function() {
        $(this).find("td[data-label='成本中心代码']").not(".no_data").find("input[type='text']").val(kostl);
        $(this).find("td[data-label='成本中心代码']").not(".no_data").find("input[type='hidden']").val(departmentId);
        $(this).find("td[data-label='成本中心名称']").not(".no_data").find("input").val(costCenterName);
        var kuaiDiType = $(this).find("td[data-label='领用方式']").not(".no_data").find("select").val();
        if (kuaiDiType == "正常领用----随班车或物流") {
            $("[name='isKuaiDi']").val("no");
        }
    });
}
//获取项目对应成本中心预算
function getItemBudget() {
    var projectCostCenter = $("[name='costCenterChoose']").val();
    var itemCode = $("[name='itemCode']").val();
    var pageType = $("#pageType").val();
    var insInitDate = $("#insInitDate").val();
    var month = (new Date()).getMonth() + 1;
    var bussinessName = $("[name='bussiness_name']").val();
    var tableName = "userAimTable";
    $.ajax({
        url: common.getPath() + '/LYFSynRB/qryBudgetByCostCenter?costCenter=' + projectCostCenter + "&month=" + month + "&tbpmCode=" + bussinessName + "&itemCode=" + itemCode,
        type: 'get',
        async: false,
        contentType: "application/json;charset=utf-8",
        success: function(result) {
            if (JSON.stringify(result.data) == '[]') {
                layer.alert("成本中心" + projectCostCenter + "本月没有对应业务预算,请重新确认");
                flag = false;
                return flag;
            }
            var dataArr = result.data;
            if (itemCode) {
                dataArr = dataArr.filter(function(e) {
                    return e.itemCode == itemCode;
                });
            } else {
                dataArr = dataArr.filter(function(e) {
                    return e.itemCode == null || e.itemCode == "";
                });
            }
            if (dataArr.length > 0) {
                $("[name='" + tableName + "'] tbody").find("tr").each(function() {
                    var index = $(this).index();
                    $("[name='" + tableName + "'] tbody").find("tr:eq(" + index + ")").find("td[data-label='成本中心预算']").not(".no_data").find("input").val(dataArr[0].availableAmount);
                    $("[name='" + tableName + "'] tbody").find("tr:eq(" + index + ")").find("td[data-label='预算控制模式']").not(".no_data").find("input").val(dataArr[0].controlType);

                });
            }
            if (dataArr.length == 0) {
                layer.alert("成本中心" + projectCostCenter + "该业务当月没有项目预算");
                flag = false;
            } else {
                flag = true;
            }
        },
        error: function(result) {}
    });
    return flag;
}
function getBudget1() {
    var bussinessName = $("[name='bussiness_name']").val();
    var month = (new Date()).getMonth() + 1;
    var costCenter = [];
    var itemCode = $("[name='itemCode']").val();
    if (itemCode == null || itemCode == undefined) {
        itemCode = "";
    }
    if (itemCode) {
        return getItemBudget();
    }
    var tableName = "";
    var flag = false;
    $("[name='userAimTable'] tbody").find("tr").each(function() {
        var costCenterCode = $(this).find("td[data-label='成本中心代码']").find("input[type='text']").val();
        if (costCenterCode) {
            costCenter.push(costCenterCode);
        }
    });
    tableName = "userAimTable";
    if (costCenter.length > 0 && bussinessName != "固定资产") {
        $.ajax({
            url: common.getPath() + '/LYFSynRB/qryBudgetByCostCenter?costCenter=' + costCenter.toString() + "&month=" + month + "&tbpmCode=" + bussinessName + "&itemCode=" + itemCode,
            type: 'get',
            async: false,
            contentType: "application/json;charset=utf-8",
            success: function(result) {
                if (JSON.stringify(result.data) == '[]') {
                    var costCenterArray = unique(costCenter);
                    layer.alert("成本中心" + costCenterArray.toString() + "本月没有对应业务预算,请重新确认");
                    $("[name='" + tableName + "'] tbody").find("tr").each(function() {
                        $(this).find("td[data-label='成本中心代码']").find("input").val("");
                        $(this).find("td[data-label='成本中心名称']").find("input").val("");
                        $(this).find("td[data-label='成本中心预算']").find("input").val("");
                        $(this).find("td[data-label='预算控制模式']").find("input").val("");
                    });
                    flag = false;
                    return flag;
                }
                var dataArr = result.data;
                if (itemCode) {
                    dataArr = dataArr.filter(function(e) {
                        return e.itemCode == itemCode;
                    });
                } else {
                    dataArr = dataArr.filter(function(e) {
                        return e.itemCode == null || e.itemCode == "";
                    });
                }
                if (dataArr.length > 0) {
                    $("[name='" + tableName + "'] tbody").find("tr").each(function() {
                        var costCenterNo = $(this).find("td[data-label='成本中心代码']").find("input[type='text']").val();
                        var index = $(this).index();
                        for (var i = 0; i < dataArr.length; i++) {
                            if (costCenterNo == dataArr[i].costCenter) {
                                $("[name='" + tableName + "'] tbody").find("tr:eq(" + index + ")").find("td[data-label='成本中心预算']").not(".no_data").find("input").val(dataArr[i].availableAmount);
                                $("[name='" + tableName + "'] tbody").find("tr:eq(" + index + ")").find("td[data-label='预算控制模式']").not(".no_data").find("input").val(dataArr[i].controlType);
                                // for (var j = 0; j < costCenter.length; j++) {
                                costCenter.remove(costCenterNo);
                                // }
                            }
                        }

                    });
                }
                if (costCenter.length > 0) {
                    layer.alert("成本中心" + costCenter.toString() + "该业务当月没有预算");
                    $("[name='" + tableName + "'] tbody").find("tr").each(function() {
                        var costCenterNum = $(this).find("td[data-label='成本中心代码']").find("input[type='text']").val();
                        if (costCenter.indexOf(costCenterNum) != -1) {
                            $(this).find("td[data-label='成本中心代码']").find("input").val("");
                            $(this).find("td[data-label='成本中心名称']").find("input").val("");
                            $(this).find("td[data-label='成本中心预算']").find("input").val("");
                            $(this).find("td[data-label='预算控制模式']").find("input").val("");
                        }
                    });
                    flag = false;
                    return flag
                } else {
                    flag = true;
                }
            },
            error: function(result) {}
        });

        return flag;
    } else {
        return true;
    }
}

function getCostCenter(departmentId, elementId) {

    $.ajax({
        url: common.getPath() + '/LYFData/queryDepartAndCostCenterByDepartmentId?departmentId=' + departmentId,
        type: 'post',
        async: false,
        contentType: "application/json;charset=utf-8",
        success: function(result) {
            if (result.status == 0) {
                if (result.data == null) {
                    layer.alert("该部门没有对应的成本中心");
                    $("[name='costCenterChoose']").val("");
                    $("[name='text_tCDJ']").val("");
                    return;
                }
                if (result.data.kostl == null) {
                    layer.alert("该部门没有对应的成本中心");
                    $("[name='costCenterChoose']").val("");
                    $("[name='text_tCDJ']").val("");
                } else {

                    $("[name='costCenterChoose']").parent().find("input[type='text']").val(result.data.kostl);
                    $("[name='costCenterChoose']").parent().find("input[type='hidden']").val(result.data.departmentId);
                    $("[name='text_tCDJ']").val(result.data.cstctrShortText);
                    setCostCenterByCondition1();
                }
            } else {
                layer.alert("该部门没有对应成本中心,请联系人力解决");
                $("[name='costCenterChoose']").val("");
                $("[name='text_tCDJ']").val("");
            }
        },
        error: function(result) {}
    });
}

function getCostCenterForProject(elementId, result) {
    if (elementId == "choose_depart_XYWp_hide") {
        $("[name='text_tCDJ']").val(result.cstctrShortText);
        setCostCenterByCondition1();
    }

}

function giveHourseToHideInput(obj) {
    var wareHourse = $(obj).val();
    var index2 = wareHourse.indexOf("-");
    var index = wareHourse.indexOf(";") + 1;
    if (index2 == -1) {
        $("[name='wareHourseCode']").val("不查");
    } else {

        var wareHourseCode = wareHourse.substring(index, index2);
        $("[name='wareHourseCode']").val(wareHourseCode);
    }
}

function setCostCenterByCondition(obj) {
    var departmentId = $("#departNo").val();
    if (departmentId) {
        $.ajax({
            url: common.getPath() + '/LYFData/queryDepartAndCostCenterByDepartmentId?departmentId=' + departmentId,
            type: 'post',
            async: false,
            contentType: "application/json;charset=utf-8",
            success: function(result) {
                if (result.data != null) {
                    if (result.data.kostl && result.data.cstctrShortText) {
                        $("[name='costCenterChoose']").parent().find("input[type='text']").val(result.data.kostl);
                        $("[name='costCenterChoose']").parent().find("input[type='hidden']").val(result.data.departmentId);
                        $("[name='text_tCDJ']").val(result.data.cstctrShortText);
                    } else {
                        layer.alert("该部门没有对应的成本中心");
                        $("[name='costCenterChoose']").parent().find("input").val("");
                        $("[name='text_tCDJ']").val("");
                        return;
                    }
                } else {
                    layer.msg("该部门没有对应的成本中心");
                    return;
                }
            },
            error: function(result) {}
        });
    }

}
function fileUploadChangeEvent() {
    changeMust(null, 2);
    calculatedPriceForUpload();
}
// </script>
